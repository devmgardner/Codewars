def valid_solution(board):
    grids=[[item for row in board[:3] for item in row[:3]], [item for row in board[3:6] for item in row[:3]], [item for row in board[6:9] for item in row[:3]], [item for row in board[:3] for item in row[3:6]], [item for row in board[3:6] for item in row[3:6]], [item for row in board[6:9] for item in row[3:6]], [item for row in board[:3] for item in row[6:9]], [item for row in board[3:6] for item in row[6:9]], [item for row in board[6:9] for item in row[6:9]]]
    def checkrow(n):return all(i for i in [True if row.count(item)==1 and str(item) in ['1','2','3','4','5','6','7','8','9'] else False for row in n for item in row])
    def checkcol(n):return all(i for i in [True if column.count(item)==1 and str(item) in ['1','2','3','4','5','6','7','8','9'] else False for column in [[row[i] for row in n] for i in range(9)] for item in column])
    def checkgrid(n):return all(i for i in [True if grid.count(item)==1 and str(item) in ['1','2','3','4','5','6','7','8','9'] else False for grid in grids for item in grid])
    return all(i for i in [checkrow(board), checkcol(board), checkgrid(board)])